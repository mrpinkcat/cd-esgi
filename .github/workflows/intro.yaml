name: intro to github action

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    paths-ignore:
      - "**.pdf"
      - "**.mhtml"

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Intall dependencies
        run: pnpm install

      - name: build
        run: pnpm build

      - name: Run the server
        run: |
          pnpm preview &
          sleep 5

      - name: Check if the server is running
        run: curl -I http://localhost:4173
  
  generate-snapshots:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4

      # install teps
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Intall dependencies
        run: pnpm install
        
      # build
      - name: build
        run: pnpm build

      # preview
      - name: Run the server
        run: |
          pnpm preview &
          sleep 5

      # Create the gen folder
      - name: Create gen folder
        run: mkdir -m 777 gen

      # lancer le snapshot (commande donnée par le prof)
      - name: Generate snapshots
        run: |
          docker run -i --init --cap-add=SYS_ADMIN --network host -v ./gen:/home/pptruser/gen ghcr.io/puppeteer/puppeteer:latest node -e "$(cat snapshot.js)" http://localhost:4173 ./gen

      # Change http://localhost:4173 to https://cv.bnei.dev
      - name: Change localhost to cv.bnei.dev
        run: |
          sed -i 's/http:\/\/localhost:4173/https:\/\/cv.bnei.dev/g' ./gen/*.mhtml

      # déplacer le gen dans la static
      - name: Move snapshots
        run: |
          mv ./gen/* ./static

      # commit et push
      - name: Commit and push shapshots
        run: |
          git config --global user.email "ci@example.com"
          git config --global user.name "CI"
          git add ./static
          git commit -m "snapshots from ${{ github.sha }}"
          git push

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: generate-snapshots

    steps:
      - uses: actions/checkout@v4
        # Fetch the latest commit
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install vercel cli
        run: npm i -g vercel
      - name: Get vercel environnement
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
  deploy-netlify:
    runs-on: ubuntu-latest
    needs: generate-snapshots
    steps:
      - uses: actions/checkout@v4
        # Fetch the latest commit
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Intall dependencies
        run: pnpm install
      - name: build
        run: pnpm build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './build'
          production-branch: main
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1
    